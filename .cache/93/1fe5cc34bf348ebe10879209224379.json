{"id":"node_modules/inversify/lib/planning/reflection_utils.js","dependencies":[{"name":"/Users/aiyushdhar/Projects/curious-js/package.json","includedInParent":true,"mtime":1596799900330},{"name":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/package.json","includedInParent":true,"mtime":1596796769792},{"name":"../annotation/inject","loc":{"line":3,"column":23},"parent":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/reflection_utils.js","resolved":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/annotation/inject.js"},{"name":"../constants/error_msgs","loc":{"line":4,"column":25},"parent":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/reflection_utils.js","resolved":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/constants/error_msgs.js"},{"name":"../constants/literal_types","loc":{"line":5,"column":30},"parent":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/reflection_utils.js","resolved":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/constants/literal_types.js"},{"name":"../constants/metadata_keys","loc":{"line":6,"column":27},"parent":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/reflection_utils.js","resolved":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/constants/metadata_keys.js"},{"name":"../utils/serialization","loc":{"line":7,"column":30},"parent":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/reflection_utils.js","resolved":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/utils/serialization.js"},{"name":"./target","loc":{"line":9,"column":23},"parent":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/reflection_utils.js","resolved":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/target.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar inject_1 = require(\"../annotation/inject\");\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\nvar literal_types_1 = require(\"../constants/literal_types\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nvar serialization_1 = require(\"../utils/serialization\");\nexports.getFunctionName = serialization_1.getFunctionName;\nvar target_1 = require(\"./target\");\nfunction getDependencies(metadataReader, func) {\n    var constructorName = serialization_1.getFunctionName(func);\n    var targets = getTargets(metadataReader, constructorName, func, false);\n    return targets;\n}\nexports.getDependencies = getDependencies;\nfunction getTargets(metadataReader, constructorName, func, isBaseClass) {\n    var metadata = metadataReader.getConstructorMetadata(func);\n    var serviceIdentifiers = metadata.compilerGeneratedMetadata;\n    if (serviceIdentifiers === undefined) {\n        var msg = ERROR_MSGS.MISSING_INJECTABLE_ANNOTATION + \" \" + constructorName + \".\";\n        throw new Error(msg);\n    }\n    var constructorArgsMetadata = metadata.userGeneratedMetadata;\n    var keys = Object.keys(constructorArgsMetadata);\n    var hasUserDeclaredUnknownInjections = (func.length === 0 && keys.length > 0);\n    var iterations = (hasUserDeclaredUnknownInjections) ? keys.length : func.length;\n    var constructorTargets = getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations);\n    var propertyTargets = getClassPropsAsTargets(metadataReader, func);\n    var targets = constructorTargets.concat(propertyTargets);\n    return targets;\n}\nfunction getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata) {\n    var targetMetadata = constructorArgsMetadata[index.toString()] || [];\n    var metadata = formatTargetMetadata(targetMetadata);\n    var isManaged = metadata.unmanaged !== true;\n    var serviceIdentifier = serviceIdentifiers[index];\n    var injectIdentifier = (metadata.inject || metadata.multiInject);\n    serviceIdentifier = (injectIdentifier) ? (injectIdentifier) : serviceIdentifier;\n    if (serviceIdentifier instanceof inject_1.LazyServiceIdentifer) {\n        serviceIdentifier = serviceIdentifier.unwrap();\n    }\n    if (isManaged) {\n        var isObject = serviceIdentifier === Object;\n        var isFunction = serviceIdentifier === Function;\n        var isUndefined = serviceIdentifier === undefined;\n        var isUnknownType = (isObject || isFunction || isUndefined);\n        if (!isBaseClass && isUnknownType) {\n            var msg = ERROR_MSGS.MISSING_INJECT_ANNOTATION + \" argument \" + index + \" in class \" + constructorName + \".\";\n            throw new Error(msg);\n        }\n        var target = new target_1.Target(literal_types_1.TargetTypeEnum.ConstructorArgument, metadata.targetName, serviceIdentifier);\n        target.metadata = targetMetadata;\n        return target;\n    }\n    return null;\n}\nfunction getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations) {\n    var targets = [];\n    for (var i = 0; i < iterations; i++) {\n        var index = i;\n        var target = getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata);\n        if (target !== null) {\n            targets.push(target);\n        }\n    }\n    return targets;\n}\nfunction getClassPropsAsTargets(metadataReader, constructorFunc) {\n    var classPropsMetadata = metadataReader.getPropertiesMetadata(constructorFunc);\n    var targets = [];\n    var keys = Object.keys(classPropsMetadata);\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n        var targetMetadata = classPropsMetadata[key];\n        var metadata = formatTargetMetadata(classPropsMetadata[key]);\n        var targetName = metadata.targetName || key;\n        var serviceIdentifier = (metadata.inject || metadata.multiInject);\n        var target = new target_1.Target(literal_types_1.TargetTypeEnum.ClassProperty, targetName, serviceIdentifier);\n        target.metadata = targetMetadata;\n        targets.push(target);\n    }\n    var baseConstructor = Object.getPrototypeOf(constructorFunc.prototype).constructor;\n    if (baseConstructor !== Object) {\n        var baseTargets = getClassPropsAsTargets(metadataReader, baseConstructor);\n        targets = targets.concat(baseTargets);\n    }\n    return targets;\n}\nfunction getBaseClassDependencyCount(metadataReader, func) {\n    var baseConstructor = Object.getPrototypeOf(func.prototype).constructor;\n    if (baseConstructor !== Object) {\n        var baseConstructorName = serialization_1.getFunctionName(baseConstructor);\n        var targets = getTargets(metadataReader, baseConstructorName, baseConstructor, true);\n        var metadata = targets.map(function (t) {\n            return t.metadata.filter(function (m) {\n                return m.key === METADATA_KEY.UNMANAGED_TAG;\n            });\n        });\n        var unmanagedCount = [].concat.apply([], metadata).length;\n        var dependencyCount = targets.length - unmanagedCount;\n        if (dependencyCount > 0) {\n            return dependencyCount;\n        }\n        else {\n            return getBaseClassDependencyCount(metadataReader, baseConstructor);\n        }\n    }\n    else {\n        return 0;\n    }\n}\nexports.getBaseClassDependencyCount = getBaseClassDependencyCount;\nfunction formatTargetMetadata(targetMetadata) {\n    var targetMetadataMap = {};\n    targetMetadata.forEach(function (m) {\n        targetMetadataMap[m.key.toString()] = m.value;\n    });\n    return {\n        inject: targetMetadataMap[METADATA_KEY.INJECT_TAG],\n        multiInject: targetMetadataMap[METADATA_KEY.MULTI_INJECT_TAG],\n        targetName: targetMetadataMap[METADATA_KEY.NAME_TAG],\n        unmanaged: targetMetadataMap[METADATA_KEY.UNMANAGED_TAG]\n    };\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/inversify/lib/planning/reflection_utils.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}}],"sources":{"node_modules/inversify/lib/planning/reflection_utils.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar inject_1 = require(\"../annotation/inject\");\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\nvar literal_types_1 = require(\"../constants/literal_types\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nvar serialization_1 = require(\"../utils/serialization\");\nexports.getFunctionName = serialization_1.getFunctionName;\nvar target_1 = require(\"./target\");\nfunction getDependencies(metadataReader, func) {\n    var constructorName = serialization_1.getFunctionName(func);\n    var targets = getTargets(metadataReader, constructorName, func, false);\n    return targets;\n}\nexports.getDependencies = getDependencies;\nfunction getTargets(metadataReader, constructorName, func, isBaseClass) {\n    var metadata = metadataReader.getConstructorMetadata(func);\n    var serviceIdentifiers = metadata.compilerGeneratedMetadata;\n    if (serviceIdentifiers === undefined) {\n        var msg = ERROR_MSGS.MISSING_INJECTABLE_ANNOTATION + \" \" + constructorName + \".\";\n        throw new Error(msg);\n    }\n    var constructorArgsMetadata = metadata.userGeneratedMetadata;\n    var keys = Object.keys(constructorArgsMetadata);\n    var hasUserDeclaredUnknownInjections = (func.length === 0 && keys.length > 0);\n    var iterations = (hasUserDeclaredUnknownInjections) ? keys.length : func.length;\n    var constructorTargets = getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations);\n    var propertyTargets = getClassPropsAsTargets(metadataReader, func);\n    var targets = constructorTargets.concat(propertyTargets);\n    return targets;\n}\nfunction getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata) {\n    var targetMetadata = constructorArgsMetadata[index.toString()] || [];\n    var metadata = formatTargetMetadata(targetMetadata);\n    var isManaged = metadata.unmanaged !== true;\n    var serviceIdentifier = serviceIdentifiers[index];\n    var injectIdentifier = (metadata.inject || metadata.multiInject);\n    serviceIdentifier = (injectIdentifier) ? (injectIdentifier) : serviceIdentifier;\n    if (serviceIdentifier instanceof inject_1.LazyServiceIdentifer) {\n        serviceIdentifier = serviceIdentifier.unwrap();\n    }\n    if (isManaged) {\n        var isObject = serviceIdentifier === Object;\n        var isFunction = serviceIdentifier === Function;\n        var isUndefined = serviceIdentifier === undefined;\n        var isUnknownType = (isObject || isFunction || isUndefined);\n        if (!isBaseClass && isUnknownType) {\n            var msg = ERROR_MSGS.MISSING_INJECT_ANNOTATION + \" argument \" + index + \" in class \" + constructorName + \".\";\n            throw new Error(msg);\n        }\n        var target = new target_1.Target(literal_types_1.TargetTypeEnum.ConstructorArgument, metadata.targetName, serviceIdentifier);\n        target.metadata = targetMetadata;\n        return target;\n    }\n    return null;\n}\nfunction getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations) {\n    var targets = [];\n    for (var i = 0; i < iterations; i++) {\n        var index = i;\n        var target = getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata);\n        if (target !== null) {\n            targets.push(target);\n        }\n    }\n    return targets;\n}\nfunction getClassPropsAsTargets(metadataReader, constructorFunc) {\n    var classPropsMetadata = metadataReader.getPropertiesMetadata(constructorFunc);\n    var targets = [];\n    var keys = Object.keys(classPropsMetadata);\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n        var targetMetadata = classPropsMetadata[key];\n        var metadata = formatTargetMetadata(classPropsMetadata[key]);\n        var targetName = metadata.targetName || key;\n        var serviceIdentifier = (metadata.inject || metadata.multiInject);\n        var target = new target_1.Target(literal_types_1.TargetTypeEnum.ClassProperty, targetName, serviceIdentifier);\n        target.metadata = targetMetadata;\n        targets.push(target);\n    }\n    var baseConstructor = Object.getPrototypeOf(constructorFunc.prototype).constructor;\n    if (baseConstructor !== Object) {\n        var baseTargets = getClassPropsAsTargets(metadataReader, baseConstructor);\n        targets = targets.concat(baseTargets);\n    }\n    return targets;\n}\nfunction getBaseClassDependencyCount(metadataReader, func) {\n    var baseConstructor = Object.getPrototypeOf(func.prototype).constructor;\n    if (baseConstructor !== Object) {\n        var baseConstructorName = serialization_1.getFunctionName(baseConstructor);\n        var targets = getTargets(metadataReader, baseConstructorName, baseConstructor, true);\n        var metadata = targets.map(function (t) {\n            return t.metadata.filter(function (m) {\n                return m.key === METADATA_KEY.UNMANAGED_TAG;\n            });\n        });\n        var unmanagedCount = [].concat.apply([], metadata).length;\n        var dependencyCount = targets.length - unmanagedCount;\n        if (dependencyCount > 0) {\n            return dependencyCount;\n        }\n        else {\n            return getBaseClassDependencyCount(metadataReader, baseConstructor);\n        }\n    }\n    else {\n        return 0;\n    }\n}\nexports.getBaseClassDependencyCount = getBaseClassDependencyCount;\nfunction formatTargetMetadata(targetMetadata) {\n    var targetMetadataMap = {};\n    targetMetadata.forEach(function (m) {\n        targetMetadataMap[m.key.toString()] = m.value;\n    });\n    return {\n        inject: targetMetadataMap[METADATA_KEY.INJECT_TAG],\n        multiInject: targetMetadataMap[METADATA_KEY.MULTI_INJECT_TAG],\n        targetName: targetMetadataMap[METADATA_KEY.NAME_TAG],\n        unmanaged: targetMetadataMap[METADATA_KEY.UNMANAGED_TAG]\n    };\n}\n"},"lineCount":125}},"error":null,"hash":"6df4fafec2f6cf71c9c6804f2f786c03","cacheData":{"env":{}}}
{"id":"node_modules/inversify/lib/planning/planner.js","dependencies":[{"name":"/Users/aiyushdhar/Projects/curious-js/package.json","includedInParent":true,"mtime":1596799900330},{"name":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/package.json","includedInParent":true,"mtime":1596796769792},{"name":"../bindings/binding_count","loc":{"line":3,"column":30},"parent":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/planner.js","resolved":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/bindings/binding_count.js"},{"name":"../constants/error_msgs","loc":{"line":4,"column":25},"parent":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/planner.js","resolved":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/constants/error_msgs.js"},{"name":"../constants/literal_types","loc":{"line":5,"column":30},"parent":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/planner.js","resolved":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/constants/literal_types.js"},{"name":"../constants/metadata_keys","loc":{"line":6,"column":27},"parent":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/planner.js","resolved":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/constants/metadata_keys.js"},{"name":"../utils/exceptions","loc":{"line":7,"column":27},"parent":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/planner.js","resolved":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/utils/exceptions.js"},{"name":"../utils/serialization","loc":{"line":8,"column":30},"parent":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/planner.js","resolved":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/utils/serialization.js"},{"name":"./context","loc":{"line":9,"column":24},"parent":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/planner.js","resolved":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/context.js"},{"name":"./metadata","loc":{"line":10,"column":25},"parent":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/planner.js","resolved":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/metadata.js"},{"name":"./plan","loc":{"line":11,"column":21},"parent":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/planner.js","resolved":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/plan.js"},{"name":"./reflection_utils","loc":{"line":12,"column":33},"parent":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/planner.js","resolved":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/reflection_utils.js"},{"name":"./request","loc":{"line":13,"column":24},"parent":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/planner.js","resolved":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/request.js"},{"name":"./target","loc":{"line":14,"column":23},"parent":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/planner.js","resolved":"/Users/aiyushdhar/Projects/curious-js/node_modules/inversify/lib/planning/target.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar binding_count_1 = require(\"../bindings/binding_count\");\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\nvar literal_types_1 = require(\"../constants/literal_types\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nvar exceptions_1 = require(\"../utils/exceptions\");\nvar serialization_1 = require(\"../utils/serialization\");\nvar context_1 = require(\"./context\");\nvar metadata_1 = require(\"./metadata\");\nvar plan_1 = require(\"./plan\");\nvar reflection_utils_1 = require(\"./reflection_utils\");\nvar request_1 = require(\"./request\");\nvar target_1 = require(\"./target\");\nfunction getBindingDictionary(cntnr) {\n    return cntnr._bindingDictionary;\n}\nexports.getBindingDictionary = getBindingDictionary;\nfunction _createTarget(isMultiInject, targetType, serviceIdentifier, name, key, value) {\n    var metadataKey = isMultiInject ? METADATA_KEY.MULTI_INJECT_TAG : METADATA_KEY.INJECT_TAG;\n    var injectMetadata = new metadata_1.Metadata(metadataKey, serviceIdentifier);\n    var target = new target_1.Target(targetType, name, serviceIdentifier, injectMetadata);\n    if (key !== undefined) {\n        var tagMetadata = new metadata_1.Metadata(key, value);\n        target.metadata.push(tagMetadata);\n    }\n    return target;\n}\nfunction _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target) {\n    var bindings = getBindings(context.container, target.serviceIdentifier);\n    var activeBindings = [];\n    if (bindings.length === binding_count_1.BindingCount.NoBindingsAvailable &&\n        context.container.options.autoBindInjectable &&\n        typeof target.serviceIdentifier === \"function\" &&\n        metadataReader.getConstructorMetadata(target.serviceIdentifier).compilerGeneratedMetadata) {\n        context.container.bind(target.serviceIdentifier).toSelf();\n        bindings = getBindings(context.container, target.serviceIdentifier);\n    }\n    if (!avoidConstraints) {\n        activeBindings = bindings.filter(function (binding) {\n            var request = new request_1.Request(binding.serviceIdentifier, context, parentRequest, binding, target);\n            return binding.constraint(request);\n        });\n    }\n    else {\n        activeBindings = bindings;\n    }\n    _validateActiveBindingCount(target.serviceIdentifier, activeBindings, target, context.container);\n    return activeBindings;\n}\nfunction _validateActiveBindingCount(serviceIdentifier, bindings, target, container) {\n    switch (bindings.length) {\n        case binding_count_1.BindingCount.NoBindingsAvailable:\n            if (target.isOptional()) {\n                return bindings;\n            }\n            else {\n                var serviceIdentifierString = serialization_1.getServiceIdentifierAsString(serviceIdentifier);\n                var msg = ERROR_MSGS.NOT_REGISTERED;\n                msg += serialization_1.listMetadataForTarget(serviceIdentifierString, target);\n                msg += serialization_1.listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\n                throw new Error(msg);\n            }\n        case binding_count_1.BindingCount.OnlyOneBindingAvailable:\n            if (!target.isArray()) {\n                return bindings;\n            }\n        case binding_count_1.BindingCount.MultipleBindingsAvailable:\n        default:\n            if (!target.isArray()) {\n                var serviceIdentifierString = serialization_1.getServiceIdentifierAsString(serviceIdentifier);\n                var msg = ERROR_MSGS.AMBIGUOUS_MATCH + \" \" + serviceIdentifierString;\n                msg += serialization_1.listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\n                throw new Error(msg);\n            }\n            else {\n                return bindings;\n            }\n    }\n}\nfunction _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, parentRequest, target) {\n    var activeBindings;\n    var childRequest;\n    if (parentRequest === null) {\n        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, null, target);\n        childRequest = new request_1.Request(serviceIdentifier, context, null, activeBindings, target);\n        var thePlan = new plan_1.Plan(context, childRequest);\n        context.addPlan(thePlan);\n    }\n    else {\n        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target);\n        childRequest = parentRequest.addChildRequest(target.serviceIdentifier, activeBindings, target);\n    }\n    activeBindings.forEach(function (binding) {\n        var subChildRequest = null;\n        if (target.isArray()) {\n            subChildRequest = childRequest.addChildRequest(binding.serviceIdentifier, binding, target);\n        }\n        else {\n            if (binding.cache) {\n                return;\n            }\n            subChildRequest = childRequest;\n        }\n        if (binding.type === literal_types_1.BindingTypeEnum.Instance && binding.implementationType !== null) {\n            var dependencies = reflection_utils_1.getDependencies(metadataReader, binding.implementationType);\n            if (!context.container.options.skipBaseClassChecks) {\n                var baseClassDependencyCount = reflection_utils_1.getBaseClassDependencyCount(metadataReader, binding.implementationType);\n                if (dependencies.length < baseClassDependencyCount) {\n                    var error = ERROR_MSGS.ARGUMENTS_LENGTH_MISMATCH(reflection_utils_1.getFunctionName(binding.implementationType));\n                    throw new Error(error);\n                }\n            }\n            dependencies.forEach(function (dependency) {\n                _createSubRequests(metadataReader, false, dependency.serviceIdentifier, context, subChildRequest, dependency);\n            });\n        }\n    });\n}\nfunction getBindings(container, serviceIdentifier) {\n    var bindings = [];\n    var bindingDictionary = getBindingDictionary(container);\n    if (bindingDictionary.hasKey(serviceIdentifier)) {\n        bindings = bindingDictionary.get(serviceIdentifier);\n    }\n    else if (container.parent !== null) {\n        bindings = getBindings(container.parent, serviceIdentifier);\n    }\n    return bindings;\n}\nfunction plan(metadataReader, container, isMultiInject, targetType, serviceIdentifier, key, value, avoidConstraints) {\n    if (avoidConstraints === void 0) { avoidConstraints = false; }\n    var context = new context_1.Context(container);\n    var target = _createTarget(isMultiInject, targetType, serviceIdentifier, \"\", key, value);\n    try {\n        _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, null, target);\n        return context;\n    }\n    catch (error) {\n        if (exceptions_1.isStackOverflowExeption(error)) {\n            if (context.plan) {\n                serialization_1.circularDependencyToException(context.plan.rootRequest);\n            }\n        }\n        throw error;\n    }\n}\nexports.plan = plan;\nfunction createMockRequest(container, serviceIdentifier, key, value) {\n    var target = new target_1.Target(literal_types_1.TargetTypeEnum.Variable, \"\", serviceIdentifier, new metadata_1.Metadata(key, value));\n    var context = new context_1.Context(container);\n    var request = new request_1.Request(serviceIdentifier, context, null, [], target);\n    return request;\n}\nexports.createMockRequest = createMockRequest;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/inversify/lib/planning/planner.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}}],"sources":{"node_modules/inversify/lib/planning/planner.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar binding_count_1 = require(\"../bindings/binding_count\");\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\nvar literal_types_1 = require(\"../constants/literal_types\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nvar exceptions_1 = require(\"../utils/exceptions\");\nvar serialization_1 = require(\"../utils/serialization\");\nvar context_1 = require(\"./context\");\nvar metadata_1 = require(\"./metadata\");\nvar plan_1 = require(\"./plan\");\nvar reflection_utils_1 = require(\"./reflection_utils\");\nvar request_1 = require(\"./request\");\nvar target_1 = require(\"./target\");\nfunction getBindingDictionary(cntnr) {\n    return cntnr._bindingDictionary;\n}\nexports.getBindingDictionary = getBindingDictionary;\nfunction _createTarget(isMultiInject, targetType, serviceIdentifier, name, key, value) {\n    var metadataKey = isMultiInject ? METADATA_KEY.MULTI_INJECT_TAG : METADATA_KEY.INJECT_TAG;\n    var injectMetadata = new metadata_1.Metadata(metadataKey, serviceIdentifier);\n    var target = new target_1.Target(targetType, name, serviceIdentifier, injectMetadata);\n    if (key !== undefined) {\n        var tagMetadata = new metadata_1.Metadata(key, value);\n        target.metadata.push(tagMetadata);\n    }\n    return target;\n}\nfunction _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target) {\n    var bindings = getBindings(context.container, target.serviceIdentifier);\n    var activeBindings = [];\n    if (bindings.length === binding_count_1.BindingCount.NoBindingsAvailable &&\n        context.container.options.autoBindInjectable &&\n        typeof target.serviceIdentifier === \"function\" &&\n        metadataReader.getConstructorMetadata(target.serviceIdentifier).compilerGeneratedMetadata) {\n        context.container.bind(target.serviceIdentifier).toSelf();\n        bindings = getBindings(context.container, target.serviceIdentifier);\n    }\n    if (!avoidConstraints) {\n        activeBindings = bindings.filter(function (binding) {\n            var request = new request_1.Request(binding.serviceIdentifier, context, parentRequest, binding, target);\n            return binding.constraint(request);\n        });\n    }\n    else {\n        activeBindings = bindings;\n    }\n    _validateActiveBindingCount(target.serviceIdentifier, activeBindings, target, context.container);\n    return activeBindings;\n}\nfunction _validateActiveBindingCount(serviceIdentifier, bindings, target, container) {\n    switch (bindings.length) {\n        case binding_count_1.BindingCount.NoBindingsAvailable:\n            if (target.isOptional()) {\n                return bindings;\n            }\n            else {\n                var serviceIdentifierString = serialization_1.getServiceIdentifierAsString(serviceIdentifier);\n                var msg = ERROR_MSGS.NOT_REGISTERED;\n                msg += serialization_1.listMetadataForTarget(serviceIdentifierString, target);\n                msg += serialization_1.listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\n                throw new Error(msg);\n            }\n        case binding_count_1.BindingCount.OnlyOneBindingAvailable:\n            if (!target.isArray()) {\n                return bindings;\n            }\n        case binding_count_1.BindingCount.MultipleBindingsAvailable:\n        default:\n            if (!target.isArray()) {\n                var serviceIdentifierString = serialization_1.getServiceIdentifierAsString(serviceIdentifier);\n                var msg = ERROR_MSGS.AMBIGUOUS_MATCH + \" \" + serviceIdentifierString;\n                msg += serialization_1.listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\n                throw new Error(msg);\n            }\n            else {\n                return bindings;\n            }\n    }\n}\nfunction _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, parentRequest, target) {\n    var activeBindings;\n    var childRequest;\n    if (parentRequest === null) {\n        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, null, target);\n        childRequest = new request_1.Request(serviceIdentifier, context, null, activeBindings, target);\n        var thePlan = new plan_1.Plan(context, childRequest);\n        context.addPlan(thePlan);\n    }\n    else {\n        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target);\n        childRequest = parentRequest.addChildRequest(target.serviceIdentifier, activeBindings, target);\n    }\n    activeBindings.forEach(function (binding) {\n        var subChildRequest = null;\n        if (target.isArray()) {\n            subChildRequest = childRequest.addChildRequest(binding.serviceIdentifier, binding, target);\n        }\n        else {\n            if (binding.cache) {\n                return;\n            }\n            subChildRequest = childRequest;\n        }\n        if (binding.type === literal_types_1.BindingTypeEnum.Instance && binding.implementationType !== null) {\n            var dependencies = reflection_utils_1.getDependencies(metadataReader, binding.implementationType);\n            if (!context.container.options.skipBaseClassChecks) {\n                var baseClassDependencyCount = reflection_utils_1.getBaseClassDependencyCount(metadataReader, binding.implementationType);\n                if (dependencies.length < baseClassDependencyCount) {\n                    var error = ERROR_MSGS.ARGUMENTS_LENGTH_MISMATCH(reflection_utils_1.getFunctionName(binding.implementationType));\n                    throw new Error(error);\n                }\n            }\n            dependencies.forEach(function (dependency) {\n                _createSubRequests(metadataReader, false, dependency.serviceIdentifier, context, subChildRequest, dependency);\n            });\n        }\n    });\n}\nfunction getBindings(container, serviceIdentifier) {\n    var bindings = [];\n    var bindingDictionary = getBindingDictionary(container);\n    if (bindingDictionary.hasKey(serviceIdentifier)) {\n        bindings = bindingDictionary.get(serviceIdentifier);\n    }\n    else if (container.parent !== null) {\n        bindings = getBindings(container.parent, serviceIdentifier);\n    }\n    return bindings;\n}\nfunction plan(metadataReader, container, isMultiInject, targetType, serviceIdentifier, key, value, avoidConstraints) {\n    if (avoidConstraints === void 0) { avoidConstraints = false; }\n    var context = new context_1.Context(container);\n    var target = _createTarget(isMultiInject, targetType, serviceIdentifier, \"\", key, value);\n    try {\n        _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, null, target);\n        return context;\n    }\n    catch (error) {\n        if (exceptions_1.isStackOverflowExeption(error)) {\n            if (context.plan) {\n                serialization_1.circularDependencyToException(context.plan.rootRequest);\n            }\n        }\n        throw error;\n    }\n}\nexports.plan = plan;\nfunction createMockRequest(container, serviceIdentifier, key, value) {\n    var target = new target_1.Target(literal_types_1.TargetTypeEnum.Variable, \"\", serviceIdentifier, new metadata_1.Metadata(key, value));\n    var context = new context_1.Context(container);\n    var request = new request_1.Request(serviceIdentifier, context, null, [], target);\n    return request;\n}\nexports.createMockRequest = createMockRequest;\n"},"lineCount":156}},"error":null,"hash":"575e2cae5870943cc09c0f0ca71645fe","cacheData":{"env":{}}}